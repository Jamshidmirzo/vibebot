import asyncio
import logging
import sqlite3
import re
import time
from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiohttp import ClientSession, ClientError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

API_TOKEN = '7697670051:AAH6hD5wNfFFzCUNPRdZqNaaE_KNWeJ9TcU'
ADMIN_ID = 88938071  # –¢–≤–æ–π ID
CHANNEL_ID = '@vibejobs'

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
class VacancyStates(StatesGroup):
    title = State()
    salary = State()
    company = State()
    location = State()
    description = State()
    confirmation = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

# === –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
try:
    conn = sqlite3.connect("hh.db")
    cursor = conn.cursor()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    cursor.execute('PRAGMA table_info(hh_vacancies)')
    columns = {row[1] for row in cursor.fetchall()}
    if 'user_submitted' not in columns or 'user_id' not in columns:
        if 'user_submitted' not in columns:
            cursor.execute('ALTER TABLE hh_vacancies ADD COLUMN user_submitted INTEGER DEFAULT 0')
        if 'user_id' not in columns:
            cursor.execute('ALTER TABLE hh_vacancies ADD COLUMN user_id INTEGER')
        conn.commit()
        logger.info("–ö–æ–ª–æ–Ω–∫–∏ user_submitted –∏/–∏–ª–∏ user_id –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É hh_vacancies")
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS hh_vacancies (
            hh_id TEXT PRIMARY KEY,
            title TEXT,
            company TEXT,
            description TEXT,
            location TEXT,
            salary TEXT,
            remote INTEGER,
            is_approved INTEGER DEFAULT 0,
            is_published INTEGER DEFAULT 0,
            user_submitted INTEGER DEFAULT 0,
            user_id INTEGER
        )
    ''')
    conn.commit()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
except sqlite3.Error as e:
    logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

# === –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
IT_KEYWORDS = [
    "frontend", "backend", "fullstack", "flutter", "android", "ios", "mobile",
    "ui", "ux", "figma", "graphic", "designer", "qa", "quality assurance", "tester",
    "developer", "programmer", "software", "engineer", "web", "javascript", "react",
    "vue", "angular", "python", "java", "kotlin", "swift"
]

EXCLUDE_KEYWORDS = [
    "hr", "–º–µ–Ω–µ–¥–∂–µ—Ä", "sales", "buhgalter", "–±—É—Ö–≥–∞–ª—Ç–µ—Ä", "–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"
]

# === –°–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
TECHNOLOGIES = [
    "HTML", "CSS", "JavaScript", "TypeScript", "React", "Vue", "Angular", "Node.js",
    "Python", "Django", "Flask", "FastAPI", "Java", "Spring", "Kotlin", "Swift",
    "Flutter", "Dart", "PHP", "Laravel", "Ruby", "Rails", "C#", ".NET", "C++",
    "Go", "Rust", "SQL", "MySQL", "PostgreSQL", "MongoDB", "Redis", "Docker",
    "Kubernetes", "AWS", "Azure", "GCP", "Git", "GitHub", "GitLab", "CI/CD",
    "Bootstrap", "Tailwind", "Figma", "Sketch", "Adobe XD", "GraphQL", "REST",
    "WebSocket", "Selenium", "Cypress", "Jest", "Mocha"
]

# === –§–∏–ª—å—Ç—Ä—ã
def is_it_vacancy(text: str) -> bool:
    if not text:
        return False
    text = text.lower()
    result = any(k in text for k in IT_KEYWORDS) and not any(e in text for e in EXCLUDE_KEYWORDS)
    logger.debug(f"–¢–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏: {text[:100]}... | –≠—Ç–æ IT-–≤–∞–∫–∞–Ω—Å–∏—è: {result}")
    return result

def is_remote(description: str) -> bool:
    if not description:
        return False
    remote_keywords = [
        "—É–¥–∞–ª–µ–Ω–Ω–æ", "remote", "–¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ", "—É–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞", "work from home",
        "telecommute", "telework", "—É–¥–∞–ª—ë–Ω–Ω–æ", "—É–¥–∞–ª–µ–Ω–Ω–∞—è", "wfh"
    ]
    result = any(word in description.lower() for word in remote_keywords)
    logger.debug(f"–û–ø–∏—Å–∞–Ω–∏–µ: {description[:100]}... | –£–¥–∞–ª–µ–Ω–Ω–∞—è: {result}")
    return result

def is_uzbekistan(area_data: dict) -> bool:
    if not area_data:
        return False
    area_name = area_data.get("name", "").lower()
    area_id = str(area_data.get("id", ""))
    uzbekistan_names = ["—É–∑–±–µ–∫–∏—Å—Ç–∞–Ω", "uzbekistan", "tashkent", "—Ç–∞—à–∫–µ–Ω—Ç", "samarkand", "—Å–∞–º–∞—Ä–∫–∞–Ω–¥"]
    uzbekistan_ids = ["2214"]  # ID –¥–ª—è –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞
    result = any(name in area_name for name in uzbekistan_names) or area_id in uzbekistan_ids
    logger.debug(f"–î–∞–Ω–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏: {area_data} | –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω: {result}")
    return result

# === –û—á–∏—Å—Ç–∫–∞ HTML-—Ç–µ–≥–æ–≤
def clean_description(text: str) -> str:
    if not text:
        return ""
    cleaned = re.sub(r'<[^>]+>', '', text)
    cleaned = ' '.join(cleaned.split())
    return cleaned

# === –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
def extract_technologies(text: str) -> str:
    if not text:
        return "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
    text = text.lower()
    found_tech = []
    for tech in TECHNOLOGIES:
        if tech.lower() in text and tech not in found_tech:
            found_tech.append(tech)
    return ", ".join(found_tech) if found_tech else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"

# === –®–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def format_user_preview(v):
    remote = "–£–¥–∞–ª–µ–Ω–Ω–æ" if v['remote'] else "–û—Ñ–ª–∞–π–Ω"
    return (
        f"üíº –í–∞–∫–∞–Ω—Å–∏—è: {v['title']}\n"
        f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {v['company']}\n"
        f"üåç –õ–æ–∫–∞—Ü–∏—è: {v['location']} ({remote})\n"
        f"üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {v['salary']}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {v['description']}\n"
        f"üìå –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: {v['technologies']}"
    )

# === –®–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞
def format_it_post(v):
    remote = "–£–¥–∞–ª–µ–Ω–Ω–æ" if v['remote'] else "–û—Ñ–ª–∞–π–Ω"
    title = v['title']
    if "–¥–∂—É–Ω" in title.lower() or "junior" in title.lower():
        title = re.sub(
            r'(–¥–∂—É–Ω|junior)',
            f'<a href="https://hh.ru/vacancy/{v["id"]}">\\1</a>',
            title,
            flags=re.IGNORECASE
        )
    return (
        f"üíº –í–∞–∫–∞–Ω—Å–∏—è: {title}\n"
        f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {v['company']}\n"
        f"üåç –õ–æ–∫–∞—Ü–∏—è: {v['location']} ({remote})\n"
        f"üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {v['salary']}\n"
        f"üîó <a href='https://hh.ru/vacancy/{v['id']}'>–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏</a>\n"
        f"üìå –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: {v['technologies']}\n"
        f"#IT #–í–∞–∫–∞–Ω—Å–∏—è #–†–∞–±–æ—Ç–∞"
    )

# === –ü–∞—Ä—Å–∏–Ω–≥ HH
async def parse_hh():
    apis = [
        {"url": "https://api.hh.ru/vacancies", "area": None, "schedule": "remote"},  # –†–æ—Å—Å–∏—è, —Ç–æ–ª—å–∫–æ —É–¥–∞–ª–µ–Ω–Ω—ã–µ
        {"url": "https://api.hh.uz/vacancies", "area": "2214"},  # –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω
        {"url": "https://api.hh.kz/vacancies", "area": None}    # –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω
    ]
    params = {
        "text": " OR ".join(IT_KEYWORDS),
        "per_page": 100,
    }
    
    for api in apis:
        try:
            async with ClientSession() as session:
                api_params = params.copy()
                if api["area"]:
                    api_params["area"] = api["area"]
                if api["schedule"]:
                    api_params["schedule"] = api["schedule"]
                logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {api['url']} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {api_params}")
                async with session.get(api['url'], params=api_params) as r:
                    if r.status != 200:
                        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ API —Å —Å—Ç–∞—Ç—É—Å–æ–º {r.status} –¥–ª—è {api['url']}")
                        await bot.send_message(ADMIN_ID, f"–û—à–∏–±–∫–∞ API {api['url']}: —Å—Ç–∞—Ç—É—Å {r.status}")
                        continue
                    data = await r.json()
                    vacancies = data.get("items", [])
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π –æ—Ç {api['url']}")

                    if not vacancies:
                        await bot.send_message(ADMIN_ID, f"–ù–µ—Ç –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –æ—Ç {api['url']}")
                        continue

                    suitable_vacancies = 0
                    for item in vacancies:
                        hh_id = item.get("id")
                        title = item.get("name", "")
                        company = item.get("employer", {}).get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
                        area = item.get("area", {})
                        area_name = area.get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
                        desc = item.get("snippet", {}).get("requirement", "") or item.get("snippet", {}).get("responsibility", "") or ""
                        desc_cleaned = clean_description(desc)
                        technologies = extract_technologies(desc_cleaned)
                        full_text = f"{title} {desc_cleaned}"

                        if not is_it_vacancy(full_text):
                            logger.debug(f"–í–∞–∫–∞–Ω—Å–∏—è {hh_id} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–∞: –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ IT")
                            continue

                        salary = item.get("salary")
                        sal_text = "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                        if salary:
                            sal_text = ""
                            if salary.get("from"):
                                sal_text += f"–æ—Ç {salary['from']}"
                            if salary.get("to"):
                                sal_text += f" –¥–æ {salary['to']}"
                            sal_text += f" {salary.get('currency', '')}"

                        cursor.execute("SELECT 1 FROM hh_vacancies WHERE hh_id = ?", (hh_id,))
                        if cursor.fetchone():
                            logger.debug(f"–í–∞–∫–∞–Ω—Å–∏—è {hh_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ")
                            continue

                        remote_flag = is_remote(desc_cleaned)
                        is_uz = is_uzbekistan(area)

                        try:
                            cursor.execute(
                                "INSERT INTO hh_vacancies (hh_id, title, company, description, location, salary, remote, is_approved, is_published) "
                                "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)",
                                (hh_id, title, company, desc_cleaned, area_name, sal_text, remote_flag, 0, 0)
                            )
                            conn.commit()
                            logger.info(f"–í–∞–∫–∞–Ω—Å–∏—è {hh_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É")
                        except sqlite3.Error as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ {hh_id}: {e}")
                            continue

                        if is_uz or remote_flag:
                            suitable_vacancies += 1
                            post = format_it_post({
                                "id": hh_id,
                                "title": title,
                                "company": company,
                                "location": area_name,
                                "salary": sal_text,
                                "remote": remote_flag,
                                "technologies": technologies
                            })
                            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                                [
                                    InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{hh_id}"),
                                    InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_{hh_id}")
                                ]
                            ])
                            try:
                                await bot.send_message(
                                    ADMIN_ID,
                                    post,
                                    parse_mode="HTML",
                                    reply_markup=keyboard
                                )
                                logger.info(f"–í–∞–∫–∞–Ω—Å–∏—è {hh_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è")
                            except Exception as e:
                                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é {hh_id} –∞–¥–º–∏–Ω—É: {e}")

                    if suitable_vacancies == 0:
                        await bot.send_message(
                            ADMIN_ID,
                            f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π (–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω–Ω—ã–µ) –æ—Ç {api['url']}"
                        )
                        logger.info(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π –æ—Ç {api['url']}")

        except ClientError as e:
            logger.error(f"–û—à–∏–±–∫–∞ HTTP-–∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è {api['url']}: {e}")
            await bot.send_message(ADMIN_ID, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {api['url']}: {e}")
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ parse_hh –¥–ª—è {api['url']}: {e}")
            await bot.send_message(ADMIN_ID, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {api['url']}: {e}")

# === –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
@router.message(Command("start"))
async def start_command(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é", callback_data="publish_vacancy")]
    ])
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é:", reply_markup=keyboard)

@router.callback_query(lambda c: c.data == "publish_vacancy")
async def process_publish_vacancy(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(VacancyStates.title)
    await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —à–∞–≥ –∑–∞ —à–∞–≥–æ–º:\n1. –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏")

@router.message(VacancyStates.title)
async def process_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(VacancyStates.salary)
    await message.answer("2. –ó–∞—Ä–ø–ª–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–æ—Ç 50000 –¥–æ 100000 RUB')")

@router.message(VacancyStates.salary)
async def process_salary(message: types.Message, state: FSMContext):
    await state.update_data(salary=message.text)
    await state.set_state(VacancyStates.company)
    await message.answer("3. –ö–æ–º–ø–∞–Ω–∏—è")

@router.message(VacancyStates.company)
async def process_company(message: types.Message, state: FSMContext):
    await state.update_data(company=message.text)
    await state.set_state(VacancyStates.location)
    await message.answer("4. –õ–æ–∫–∞—Ü–∏—è")

@router.message(VacancyStates.location)
async def process_location(message: types.Message, state: FSMContext):
    await state.update_data(location=message.text)
    await state.set_state(VacancyStates.description)
    await message.answer("5. –û–ø–∏—Å–∞–Ω–∏–µ")

@router.message(VacancyStates.description)
async def process_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    data = await state.get_data()
    technologies = extract_technologies(data['description'].lower())
    remote_flag = is_remote(data['description'])
    data['technologies'] = technologies
    data['remote'] = remote_flag

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    preview = format_user_preview(data)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_vacancy")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_vacancy")]
    ])
    await message.answer(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n{preview}", reply_markup=keyboard)
    await state.set_state(VacancyStates.confirmation)

@router.callback_query(lambda c: c.data == "confirm_vacancy", VacancyStates.confirmation)
async def process_confirm_vacancy(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = callback.from_user.id
    hh_id = f"user_{user_id}_{int(time.time())}"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID

    try:
        cursor.execute(
            "INSERT INTO hh_vacancies (hh_id, title, company, description, location, salary, remote, is_approved, is_published, user_submitted, user_id) "
            "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
            (hh_id, data['title'], data['company'], data['description'], data['location'], data['salary'], data['remote'], 0, 0, 1, user_id)
        )
        conn.commit()
        logger.info(f"–í–∞–∫–∞–Ω—Å–∏—è {hh_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É")
        post = format_it_post({
            "id": hh_id,
            "title": data['title'],
            "company": data['company'],
            "location": data['location'],
            "salary": data['salary'],
            "remote": data['remote'],
            "technologies": data['technologies']
        })
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{hh_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_{hh_id}")
            ]
        ])
        await bot.send_message(
            ADMIN_ID,
            f"–ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n\n{post}",
            parse_mode="HTML",
            reply_markup=keyboard
        )
        await callback.message.edit_text("–í–∞—à–∞ –≤–∞–∫–∞–Ω—Å–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!")
        await state.clear()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ {hh_id}: {e}")
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏.")
        await state.clear()

@router.callback_query(lambda c: c.data == "cancel_vacancy", VacancyStates.confirmation)
async def process_cancel_vacancy(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–∞–∫–∞–Ω—Å–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()

# === –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
@router.message(Command("start_hh_parser"))
async def start_hh_parser(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        return
    logger.info("–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ HH")
    await message.answer("–ü–æ–∏—Å–∫ IT-–≤–∞–∫–∞–Ω—Å–∏–π –∑–∞–ø—É—â–µ–Ω.")
    asyncio.create_task(parse_hh())

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∞
@router.callback_query(lambda c: c.data.startswith('approve_') or c.data.startswith('decline_'))
async def handle_vacancy_action(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        await callback.answer("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
        return

    action, hh_id = callback.data.split('_', 1)
    try:
        if action == 'approve':
            cursor.execute(
                "UPDATE hh_vacancies SET is_approved = 1, is_published = 1 WHERE hh_id = ?",
                (hh_id,)
            )
            conn.commit()
            cursor.execute("SELECT user_id, title, company, description, location, salary, remote FROM hh_vacancies WHERE hh_id = ?", (hh_id,))
            vacancy = cursor.fetchone()
            if vacancy:
                user_id = vacancy[0]
                post = format_it_post({
                    "id": hh_id,
                    "title": vacancy[1],
                    "company": vacancy[2],
                    "technologies": extract_technologies(vacancy[3]),
                    "location": vacancy[4],
                    "salary": vacancy[5],
                    "remote": vacancy[6]
                })
                await bot.send_message(
                    CHANNEL_ID,
                    post,
                    parse_mode="HTML",
                    disable_web_page_preview=True
                )
                await bot.send_message(user_id, f"–í–∞—à–∞ –≤–∞–∫–∞–Ω—Å–∏—è '{vacancy[1]}' –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")
                await callback.message.edit_text(
                    f"–í–∞–∫–∞–Ω—Å–∏—è {hh_id} –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞",
                    reply_markup=None
                )
                logger.info(f"–í–∞–∫–∞–Ω—Å–∏—è {hh_id} –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞")
            else:
                await callback.message.edit_text(
                    f"–í–∞–∫–∞–Ω—Å–∏—è {hh_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    reply_markup=None
                )
                logger.warning(f"–í–∞–∫–∞–Ω—Å–∏—è {hh_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è")
        else:  # decline
            await bot.send_message(ADMIN_ID, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –æ—Ç–∫–∞–∑–∞:")
            await bot.register_next_step_handler(callback.message, process_decline_comment, hh_id=hh_id)

        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {action} –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ {hh_id}: {e}")
        await callback.message.edit_text(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏ {hh_id}: {e}",
            reply_markup=None
        )
        await callback.answer()

async def process_decline_comment(message: types.Message, hh_id: str):
    comment = message.text
    cursor.execute("SELECT user_id, title FROM hh_vacancies WHERE hh_id = ?", (hh_id,))
    vacancy = cursor.fetchone()
    if vacancy:
        user_id = vacancy[0]
        await bot.send_message(user_id, f"–í–∞—à–∞ –≤–∞–∫–∞–Ω—Å–∏—è '{vacancy[1]}' –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")
        cursor.execute("DELETE FROM hh_vacancies WHERE hh_id = ?", (hh_id,))
        conn.commit()
        await message.edit_text(f"–í–∞–∫–∞–Ω—Å–∏—è {hh_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º: {comment}")
        logger.info(f"–í–∞–∫–∞–Ω—Å–∏—è {hh_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
    else:
        await message.edit_text(f"–í–∞–∫–∞–Ω—Å–∏—è {hh_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

# === –ü–∞—Ä—Å–∏–Ω–≥ –∏ –∑–∞–ø—É—Å–∫
async def parse_hh():
    apis = [
        {"url": "https://api.hh.ru/vacancies", "area": None, "schedule": "remote"},  # –†–æ—Å—Å–∏—è, —Ç–æ–ª—å–∫–æ —É–¥–∞–ª–µ–Ω–Ω—ã–µ
        {"url": "https://api.hh.uz/vacancies", "area": "2214"},  # –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω
        {"url": "https://api.hh.kz/vacancies", "area": None}    # –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω
    ]
    params = {
        "text": " OR ".join(IT_KEYWORDS),
        "per_page": 100,
    }
    
    for api in apis:
        try:
            async with ClientSession() as session:
                api_params = params.copy()
                if api["area"]:
                    api_params["area"] = api["area"]
                if api["schedule"]:
                    api_params["schedule"] = api["schedule"]
                logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {api['url']} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {api_params}")
                async with session.get(api['url'], params=api_params) as r:
                    if r.status != 200:
                        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ API —Å —Å—Ç–∞—Ç—É—Å–æ–º {r.status} –¥–ª—è {api['url']}")
                        await bot.send_message(ADMIN_ID, f"–û—à–∏–±–∫–∞ API {api['url']}: —Å—Ç–∞—Ç—É—Å {r.status}")
                        continue
                    data = await r.json()
                    vacancies = data.get("items", [])
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π –æ—Ç {api['url']}")

                    if not vacancies:
                        await bot.send_message(ADMIN_ID, f"–ù–µ—Ç –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –æ—Ç {api['url']}")
                        continue

                    suitable_vacancies = 0
                    for item in vacancies:
                        hh_id = item.get("id")
                        title = item.get("name", "")
                        company = item.get("employer", {}).get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
                        area = item.get("area", {})
                        area_name = area.get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
                        desc = item.get("snippet", {}).get("requirement", "") or item.get("snippet", {}).get("responsibility", "") or ""
                        desc_cleaned = clean_description(desc)
                        technologies = extract_technologies(desc_cleaned)
                        full_text = f"{title} {desc_cleaned}"

                        if not is_it_vacancy(full_text):
                            logger.debug(f"–í–∞–∫–∞–Ω—Å–∏—è {hh_id} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–∞: –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ IT")
                            continue

                        salary = item.get("salary")
                        sal_text = "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                        if salary:
                            sal_text = ""
                            if salary.get("from"):
                                sal_text += f"–æ—Ç {salary['from']}"
                            if salary.get("to"):
                                sal_text += f" –¥–æ {salary['to']}"
                            sal_text += f" {salary.get('currency', '')}"

                        cursor.execute("SELECT 1 FROM hh_vacancies WHERE hh_id = ?", (hh_id,))
                        if cursor.fetchone():
                            logger.debug(f"–í–∞–∫–∞–Ω—Å–∏—è {hh_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ")
                            continue

                        remote_flag = is_remote(desc_cleaned)
                        is_uz = is_uzbekistan(area)

                        try:
                            cursor.execute(
                                "INSERT INTO hh_vacancies (hh_id, title, company, description, location, salary, remote, is_approved, is_published) "
                                "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)",
                                (hh_id, title, company, desc_cleaned, area_name, sal_text, remote_flag, 0, 0)
                            )
                            conn.commit()
                            logger.info(f"–í–∞–∫–∞–Ω—Å–∏—è {hh_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É")
                        except sqlite3.Error as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ {hh_id}: {e}")
                            continue

                        if is_uz or remote_flag:
                            suitable_vacancies += 1
                            post = format_it_post({
                                "id": hh_id,
                                "title": title,
                                "company": company,
                                "location": area_name,
                                "salary": sal_text,
                                "remote": remote_flag,
                                "technologies": technologies
                            })
                            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                                [
                                    InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{hh_id}"),
                                    InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_{hh_id}")
                                ]
                            ])
                            try:
                                await bot.send_message(
                                    ADMIN_ID,
                                    post,
                                    parse_mode="HTML",
                                    reply_markup=keyboard
                                )
                                logger.info(f"–í–∞–∫–∞–Ω—Å–∏—è {hh_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è")
                            except Exception as e:
                                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é {hh_id} –∞–¥–º–∏–Ω—É: {e}")

                    if suitable_vacancies == 0:
                        await bot.send_message(
                            ADMIN_ID,
                            f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π (–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω–Ω—ã–µ) –æ—Ç {api['url']}"
                        )
                        logger.info(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π –æ—Ç {api['url']}")

        except ClientError as e:
            logger.error(f"–û—à–∏–±–∫–∞ HTTP-–∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è {api['url']}: {e}")
            await bot.send_message(ADMIN_ID, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {api['url']}: {e}")
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ parse_hh –¥–ª—è {api['url']}: {e}")
            await bot.send_message(ADMIN_ID, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {api['url']}: {e}")

# === –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–æ—Å–∞ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())